
- more than one owners per house: change something?
- things to be interactive:
    1) threshold for fine particles
    2) threshold for harmful gas
    3) threshold for humidity
- .json file: additionalFeature: just the ones you put??
- Add new sensors and equipment
- Create and implement scenario 3:
- Look for useful design patterns:
    - Singleton V
    - Facade V
- Modify Parameterization to be able to check if something is implemented (room / equipment / sensor / feature...): check in: call alarm/room that doesn't exist


- how things change if we change the configuration file?
- find a way to let things work (same scenario) for different kind of house: how will the house detect a falling if there's no falling detector? how we

- fix the class diagram (put the design patterns)
- add 2 scenarios (3 to be implemented: 1-2-3)

- SQUINTIN:
    1) Scenario 1
    2) Parametrization
    3)
- SMAFLIN:
    1) Scenario 3
    2) Find some design patterns

DESIGN PATTERNS USED:

- Singleton (Parameterization, House, SmartAssistant, CentralUnit, AlarmSystem, AirQualityTester, Interpreter)
- Facade (User::enterRoom, Parametrization::initialize, Interpreter::interpret)


CODE SAMPLES FOR VARIABILITY:

A room can have different sensors / equipment
REFLECTION AND INHERITANCE AT THE SAME TIME:

Parameterization.java in addEquipmentToRoom() method
String equipmentKey = (String) equipmentObj;

            String classPath = "be.uclouvain.lingi2252.groupN.equipment." + toClassName(equipmentKey);

            try {
                Class<?> clazz = Class.forName(classPath);
                Constructor<?> ctor = clazz.getConstructor(Room.class);

                room.addEquipment((Equipment) ctor.newInstance(room));

            } catch (ClassNotFoundException e) {
                System.out.println("Equipment [" + classPath + "] doesn't exist or isn't implemented yet!");
            }